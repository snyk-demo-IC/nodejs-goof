name: Snyk Delta PR Scan

on:
  pull_request:
    branches:
      - main  # adjust to your main/release branch
    types: [opened, synchronize, reopened]

jobs:
  snyk-delta-scan:
    runs-on: ubuntu-latest
    permissions:
      pull-requests: write

    steps:
      - name: Checkout PR code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0  # important to fetch all history for delta comparison

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
          
      - name: NPM install
        run: npm install
          
      - name: Install snyk and snyk-delta
        run: |
          npm install -g snyk 
          npm i -g snyk-delta
          sudo apt-get update && sudo apt-get install -y jq

      - name: Setup Snyk
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        run: snyk auth "$SNYK_TOKEN"

      - name: Run snyk-delta and prepare comment
        id: snyk_delta_run
        run: |
          COMMENT_FILE="snyk_delta_comment.md"
          RAW_DELTA_OUTPUT_FILE="snyk_delta_raw_output.txt"

          # 1. Run snyk-delta and capture its output (including stderr) to a temporary file.
          snyk test --json --print-deps | \
          snyk-delta > "$RAW_DELTA_OUTPUT_FILE" 2>&1 || true

          # --- Construct the PR comment content in COMMENT_FILE ---
          # Always start by (re)creating the file to ensure it's clean for this run
          echo "#### Snyk Delta Scan Results" > "$COMMENT_FILE" # Use H4 for smaller heading
          echo "" >> "$COMMENT_FILE" # Blank line for spacing

          # Check the raw output file for specific messages to generate the summary
          NEW_VULNS_FOUND="false"
          TOTAL_NEW_VULNS=0
          CRITICAL_NEW=0
          HIGH_NEW=0
          MEDIUM_NEW=0
          LOW_NEW=0
          DIRECT_ADDED_COUNT=0
          DIRECT_REMOVED_COUNT=0
          INDIRECT_ADDED_COUNT=0
          INDIRECT_REMOVED_COUNT=0

          if [ -s "$RAW_DELTA_OUTPUT_FILE" ]; then
              if grep -q "âœ— New vulnerabilities introduced!" "$RAW_DELTA_OUTPUT_FILE"; then
                  NEW_VULNS_FOUND="true"
              fi

              TOTAL_NEW_VULNS=$(grep -E '^[[:space:]]*[0-9]+/[0-9]+:' "$RAW_DELTA_OUTPUT_FILE" | wc -l)
              CRITICAL_NEW=$(grep "Critical severity vulnerabilities:" "$RAW_DELTA_OUTPUT_FILE" | awk '{print $NF}' || echo 0)
              HIGH_NEW=$(grep "High severity vulnerabilities:" "$RAW_DELTA_OUTPUT_FILE" | awk '{print $NF}' || echo 0)
              MEDIUM_NEW=$(grep "Medium severity vulnerabilities:" "$RAW_DELTA_OUTPUT_FILE" | awk '{print $NF}' || echo 0)
              LOW_NEW=$(grep "Low severity vulnerabilities:" "$RAW_DELTA_OUTPUT_FILE" | awk '{print $NF}' || echo 0)

              DIRECT_ADDED_COUNT=$(grep -m 1 "Direct deps:" "$RAW_DELTA_OUTPUT_FILE" | grep -o 'Added [0-9]\+' | awk '{print $2}' || echo 0)
              DIRECT_REMOVED_COUNT=$(grep -m 1 "Direct deps:" "$RAW_DELTA_OUTPUT_FILE" | grep -o 'Removed [0-9]\+' | awk '{print $2}' || echo 0)
              INDIRECT_ADDED_COUNT=$(grep -m 1 "Indirect deps:" "$RAW_DELTA_OUTPUT_FILE" | grep -o 'Added [0-9]\+' | awk '{print $2}' || echo 0)
              INDIRECT_REMOVED_COUNT=$(grep -m 1 "Indirect deps:" "$RAW_DELTA_OUTPUT_FILE" | grep -o 'Removed [0-9]\+' | awk '{print $2}' || echo 0)
          fi

          if [ "$NEW_VULNS_FOUND" = "true" ]; then
              echo "ðŸš¨ **${TOTAL_NEW_VULNS} new vulnerabilities were introduced!**" >> "$COMMENT_FILE"
              echo "  - Critical: **${CRITICAL_NEW}**" >> "$COMMENT_FILE"
              echo "  - High: **${HIGH_NEW}**" >> "$COMMENT_FILE"
              echo "  - Medium: **${MEDIUM_NEW}**" >> "$COMMENT_FILE"
              echo "  - Low: **${LOW_NEW}**" >> "$COMMENT_FILE"
              echo "" >> "$COMMENT_FILE"
          else
              echo "âœ… No new vulnerabilities detected." >> "$COMMENT_FILE"
              echo "" >> "$COMMENT_FILE"
          fi

          echo "**Dependency Changes Summary:**" >> "$COMMENT_FILE"
          echo "- Direct dependencies added: **${DIRECT_ADDED_COUNT}**" >> "$COMMENT_FILE"
          echo "- Direct dependencies removed: **${DIRECT_REMOVED_COUNT}**" >> "$COMMENT_FILE"
          echo "- Indirect dependencies added: **${INDIRECT_ADDED_COUNT}**" >> "$COMMENT_FILE"
          echo "- Indirect dependencies removed: **${INDIRECT_REMOVED_COUNT}**" >> "$COMMENT_FILE"
          echo "" >> "$COMMENT_FILE"

          # Add the full raw output in a collapsible Markdown section.
          echo "<details><summary>Click to view full Snyk Delta output</summary>" >> "$COMMENT_FILE"
          echo "" >> "$COMMENT_FILE" # Blank line before code block
          echo "\`\`\`" >> "$COMMENT_FILE" # Start of Markdown code block
          cat "$RAW_DELTA_OUTPUT_FILE" >> "$COMMENT_FILE" # Append the *entire* raw output
          echo "\`\`\`" >> "$COMMENT_FILE" # End of Markdown code block
          echo "</details>" >> "$COMMENT_FILE"

          # Clean up the temporary raw output file
          rm -f "$RAW_DELTA_OUTPUT_FILE"

          # --- Optional: Debugging - print final comment content to logs ---
          echo "--- Final PR comment content being used ---"
          cat "$COMMENT_FILE"
          echo "------------------------------------------"

      - name: Post Snyk Delta Results to PR Comment
        uses: thollander/actions-comment-pull-request@v3
        if: github.event_name == 'pull_request' # Only run on PR events
        with:
          file-path: snyk_delta_comment.md # Use the prepared Markdown file
          github-token: ${{ secrets.GITHUB_TOKEN }} # Automatically generated GitHub token
          comment-tag: snyk-delta-results # Ensures comment is updated, not duplicated
          mode: upsert # Update existing comment with this tag
          create-if-not-exists: true
